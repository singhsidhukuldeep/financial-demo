
name: Build and Deploy
on: [pull_request]

jobs:
  lint-testing:
    name: Code Formatting Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade "pip<20"
        pip install -r requirements-dev.txt
    - name: Code Formatting Tests
      working-directory: ${{ github.workspace }}
      run: |
        make lint
  type-testing:
    name: Type Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade "pip<20"
        pip install -r requirements-dev.txt
    - name: Type Checking
      working-directory: ${{ github.workspace }}
      run: |
        make types
  data-validation:
    name: Data Validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade "pip<20"
        pip install -r requirements-dev.txt
    - name: Rasa Data Validation
      working-directory: ${{ github.workspace }}
      run: |
        rasa data validate --debug
  training-testing:
    name: Testing Stories
    runs-on: ubuntu-latest
    needs: [data-validation]
    steps:
    - uses: actions/checkout@v1
    - id: files
      uses: jitterbit/get-changed-files@v1
    - name: set_training
      if: |
          contains(  steps.files.outputs.all, 'data/' ) 
          || contains(  steps.files.outputs.all, 'config.yml' ) 
          || contains(  steps.files.outputs.all, 'domain.yml' )
      run: echo "::set-env name=RUN_TRAINING::true"
    - name: Set up Python 3.7
      if: env.RUN_TRAINING == 'true'
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      if: env.RUN_TRAINING == 'true'
      run: |
          python -m pip install --upgrade "pip<20"
          pip install -r requirements-dev.txt
          python -m spacy download en_core_web_md
          python -m spacy link en_core_web_md en
    - name: Cross-validate NLU model
      id: cvnlu
      if: |
          ( contains(github.event.pull_request.labels.*.name, 'nlu_testing_required') 
          && contains(  steps.files.outputs.all, 'data/nlu.md' ) )
          || contains(  steps.files.outputs.all, 'config.yml' )
      run: |  
          rasa test nlu -f 3 --cross-validation
          python .github/workflows/format_results.py
    - name: post cross-val results to PR
      if: steps.cvnlu.outcome == 'success'
      uses: amn41/comment-on-pr@comment-file-contents
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        msg: results.md
    - name: Train Model
      if: env.RUN_TRAINING == 'true'
      working-directory: ${{ github.workspace }}
      run: |
        rasa train
    - name: Test Training Stories
      if: |
          contains(  steps.files.outputs.all, 'data/stories.md' ) 
          || contains(  steps.files.outputs.all, 'config.yml' ) 
          || contains(  steps.files.outputs.all, 'domain.yml' )
      working-directory: ${{ github.workspace }}
      run: |
        rasa test --fail-on-prediction-errors
    - name: Upload model
      if: |
          github.ref == 'refs/heads/master' 
          && env.RUN_TRAINING == 'true'
      uses: actions/upload-artifact@master
      with:
        name: model
        path: models
  build-images:
    name: Build and Push Images
    needs: [lint-testing, type-testing, training-testing]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout git repository 🕝
      uses: actions/checkout@v2
    - id: files
      uses: jitterbit/get-changed-files@v1
    - name: set_actions
      if: |
        contains(  steps.files.outputs.all, 'actions/' ) 
        || contains(  steps.files.outputs.all, 'Dockerfile' )
      run: echo "::set-env name=ACTIONS_CHANGED::true"

    - name: Login to DockerHub Registry 🔢
      run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ env.DOCKERHUB_USERNAME }} --password-stdin || true

    - name: Pull latest${{ matrix.image.tag_ext }} Docker image for caching
      run: docker pull rasa/financial-demo:latest || true

    - name: Build latest${{ matrix.image.tag_ext }} Docker image
      run: docker build . --tag rasa/financial-demo:latest --cache-from rasa/financial-demo:latest

